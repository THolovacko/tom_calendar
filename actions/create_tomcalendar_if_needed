#! /usr/bin/ruby

cookie_session_id = TomEnv::get('HTTP_COOKIE')&.split(';')&.find{ |cookie| cookie.match?('session_id') }&.sub('session_id=','')&.strip
cookie_session_id = nil if cookie_session_id == ''

unless cookie_session_id
  print StatusCodeStr::BAD_REQUEST
  return
end

cache_result = TomMemcache::get("create_tc_if_needed#{cookie_session_id}").freeze
if cache_result
  print StatusCodeStr::OK
  return
end

session_id        = JSON.parse(cookie_session_id)
dynamodb          = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
google_id         = session_id['google_id']
google_authorizer = get_google_authorizer(dynamodb)

google_calendar_service               = Google::Apis::CalendarV3::CalendarService.new
google_calendar_service.authorization = google_authorizer.get_credentials(google_id)
google_calendar_service.client_options.application_name = 'TomCalendar'.freeze

# get google calendar id
begin
  params = {
    table_name: 'GoogleCalendarIDs',
    key: { google_id: google_id }
  }

  result_item = dynamodb.get_item(params)&.item || {}
  google_calendar_id = result_item['google_calendar_id']
rescue Exception => e
  print StatusCodeStr::error_message(e.message)
  return
end

# confirm google calendar exists
google_calendar = nil
if google_calendar_id
  begin
    # @test: pagination with several calendars
    page_token = nil
    calendar_lists = google_calendar_service.list_calendar_lists(page_token: page_token)
    calendar_lists.items.each do |calendar|
      if (calendar.summary == 'TomCalendar'.freeze) && (calendar.id == google_calendar_id)
        google_calendar = calendar
      end
    end
    if calendar_lists.next_page_token != page_token
      page_token = calendar_lists.next_page_token
    else
      page_token = nil
    end
  rescue Exception => e # Google Server or Authorization Error"
    print StatusCodeStr::UNAUTHORIZED
    return
  end while !page_token.nil?
end

# create google calendar if missing
unless google_calendar
  google_calendar = Google::Apis::CalendarV3::Calendar.new(summary: 'TomCalendar')
  google_calendar = google_calendar_service.insert_calendar(google_calendar)

  params = {
    table_name: 'GoogleCalendarIDs',
    item: { google_id: google_id, google_calendar_id: google_calendar.id }
  }
  google_calendar_id = google_calendar.id

  begin
    dynamodb.put_item(params)
    # @remember: get all created and subscribed events then create all (maybe user deleted calendar or something)
    #`#{ENV['ROOT_DIR_PATH']}/tasks/create_google_calendar_events '#{[event].to_json}' '#{google_calendar_id}' >/dev/null &`
  rescue
    google_calendar_service.delete_calendar(google_calendar_id)
    print StatusCodeStr::error_message('Unable to add google calendar id')
    return
  end
else
=begin  @remember: should auto correct events that user has changed on their google calendar (maybe in settings have a resync button)
        @remember: if sync tokens get used then should probably delete them when user deletes account
  sync_token_params = {
    table_name: 'GoogleCalendarSyncTokens',
    key: { google_id: google_id }
  }
  sync_token = dynamodb.get_item(sync_token_params)&.item['sync_token']

  page_token = nil
  result     = nil
  begin
    # @test: single events as false and true
    result = google_calendar_service.list_events(google_calendar.id, page_token: page_token, sync_token: sync_token, show_deleted: true, max_results: 2500, single_events: false)
    result.items.each do |event|
      # get event and skip if equivalent or deleted
      tomcalendar_event = dynamodb.get_item({ table_name: 'Events', key: { google_id: google_id, title: event.summary } })&.item
      next unless tomcalendar_event

      # next if equivalent

      if event.status == 'cancelled'
        # create_event
      else
        # update_event
      end
    end
    if result.next_page_token != page_token
      page_token = result.next_page_token
    else
      page_token = nil
    end
  end while !page_token.nil?
  next_sync_token = result.next_sync_token

  put_sync_token_params = {
    table_name: 'GoogleCalendarSyncTokens',
    item: { google_id: google_id, sync_token: next_sync_token }
  }
  dynamodb.put_item(put_sync_token_params)
=end
end

TomMemcache::set("create_tc_if_needed#{cookie_session_id}", 'OK', 30).freeze
print StatusCodeStr::OK
