#! /usr/bin/ruby

cookie_session_id = TomEnv::get('HTTP_COOKIE')&.split(';')&.find{ |cookie| cookie.match?('session_id') }&.sub('session_id=','')&.strip
cookie_session_id = nil if cookie_session_id == ''

unless cookie_session_id
  return StatusCodeStr::BAD_REQUEST
end

cache_result = TomMemcache::get("create_tc_if_needed#{cookie_session_id}").freeze
if cache_result
  return StatusCodeStr::OK
end

session_id        = JSON.parse(cookie_session_id)
dynamodb          = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
google_id         = session_id['google_id']
google_authorizer = get_google_authorizer(dynamodb)

google_calendar_service               = Google::Apis::CalendarV3::CalendarService.new
google_calendar_service.authorization = google_authorizer.get_credentials(google_id)
google_calendar_service.client_options.application_name = 'TomCalendar'.freeze

google_calendar = nil
exponential_backoff do
  # get google calendar id
  params = {
    table_name: 'GoogleCalendarIDs',
    key: { google_id: google_id }
  }

  result_item = dynamodb.get_item(params)&.item || {}
  google_calendar_id = result_item['google_calendar_id']

  # confirm google calendar exists
  google_calendar = nil
  if google_calendar_id
    begin
      # @test: pagination with several calendars
      page_token = nil
      calendar_lists = google_calendar_service.list_calendar_lists(page_token: page_token)
      calendar_lists.items.each do |calendar|
        if (calendar.summary == 'TomCalendar'.freeze) && (calendar.id == google_calendar_id)
          google_calendar = calendar
        end
      end
      if calendar_lists.next_page_token != page_token
        page_token = calendar_lists.next_page_token
      else
        page_token = nil
      end
    rescue Exception => e # Google Server or Authorization Error"
      return StatusCodeStr::UNAUTHORIZED
    end while !page_token.nil?
  end
end

# create google calendar if missing
unless google_calendar
  google_calendar = Google::Apis::CalendarV3::Calendar.new(summary: 'TomCalendar')
  begin
    attempts ||= 0
    google_calendar = google_calendar_service.insert_calendar(google_calendar)
  rescue
    if attempts < 3
      attempts = attempts + 1
      sleep 1
      retry
    else
      raise 'failed to create google calendar'
    end
  end

  params = {
    table_name: 'GoogleCalendarIDs',
    item: { google_id: google_id, google_calendar_id: google_calendar.id }
  }
  google_calendar_id = google_calendar.id

  begin
    db_attempts ||= 0
    dynamodb.put_item(params)

    reminders_params = {
      table_name: 'EventReminders',
      key_condition_expression: "#sid = :subscriber_id",
      expression_attribute_names: { "#sid" => "subscriber_id" },
      expression_attribute_values: { ":subscriber_id" => google_id }
    }

    subscribed_events = []
    query_result = dynamodb.query(reminders_params)
    query_result.items.each do |reminder|
      event_id = reminder['event_id'].split('-')
      event_params = {
        table_name: 'Events',
        key: { google_id: event_id[0], title: event_id[1] }
      }
      result_event = dynamodb.get_item(event_params)&.item
      subscribed_events.push(result_event) if result_event
    end

    # @remember: should probably do for each n events
    `#{ENV['ROOT_DIR_PATH']}/tasks/create_google_calendar_events '#{subscribed_events.to_json}' '#{google_calendar_id}' >/dev/null &` unless subscribed_events.empty?
  rescue
    if db_attempts < 3
      db_attempts = db_attempts + 1
      sleep 1
      retry
    else
      google_calendar_service.delete_calendar(google_calendar_id)
      return StatusCodeStr::error_message('Unable to add google calendar id')
    end
  end
end

TomMemcache::set("create_tc_if_needed#{cookie_session_id}", 'OK', 30).freeze
return StatusCodeStr::OK
