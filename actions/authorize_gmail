#! /usr/bin/ruby

# @remember: need submit consent screen for OAuth verification
# @remember: need to notify user when refresh token is not valid while auto updating google calendar  ex) if subscribed event changes date and user changed gmail password
# @remember: need to handle out of sync events between the old token expiring and getting a new refresh token (synchronizing missed changes should be its own post request)

session_id = {}
exponential_backoff do
  # create google tokens (store credentials) and  create session
  dynamodb           = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
  google_authorizer  = get_google_authorizer(dynamodb)
  authorization_code = TomEnv::get('MESSAGE')
  return StatusCodeStr::UNAUTHORIZED 'invalid authorization code' unless authorization_code
  credentials        = google_authorizer.get_credentials_from_code(user_id: 'default', code: authorization_code)

  user_data = JWT.decode(credentials.id_token, nil, false).first
  return StatusCodeStr::UNAUTHORIZED unless user_data['iss'] == 'https://accounts.google.com'.freeze
  return StatusCodeStr::UNAUTHORIZED unless user_data['aud'] == ENV['GOOGLE_OAUTH_CLIENT_ID']
  return StatusCodeStr::UNAUTHORIZED unless user_data['exp'] > 0

  google_id  = user_data['sub']
  device_id  = Digest::SHA256.hexdigest "#{ENV['SESSION_HASH_LEFT_PADDING']}#{Time.now}#{rand}#{ENV['SESSION_HASH_RIGHT_PADDING']}"
  session_id = { google_id: google_id, device_id: device_id }

  google_authorizer.store_credentials(google_id, credentials)

  session_params = {
    table_name: 'Sessions',
    item: { google_id: google_id, device_id: device_id, last_updated: Time.now.to_s, user_agent: TomEnv::get('HTTP_USER_AGENT') }
  }
  #dynamodb.put_item(session_params)

  google_profile_params = {
    table_name: 'GoogleProfiles',
    item: { google_id: google_id, email: user_data['email'], name: user_data['name'], picture: user_data['picture'], given_name: user_data['given_name'], family_name: user_data['family_name'], locale: user_data['locale'] }
  }
  #dynamodb.put_item(google_profile_params)

  dynamodb.transact_write_items({
    transact_items: [
      { put: session_params },
      { put: google_profile_params }
    ]
  })
end

return "Content-type: application/json\n\n#{session_id.to_json}"
