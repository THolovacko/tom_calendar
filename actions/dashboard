#! /usr/bin/ruby

# @remember: should download the header link libs locally (maybe concatenate?)
# @remember: figure out how to scale radius?
# @test:     user agent detection on several platforms

# @current: create form


cookie_session_id = ENV['HTTP_COOKIE']&.split(';')&.find{ |cookie| cookie.match?('session_id') }&.sub('session_id=','')&.strip
cookie_session_id = nil if cookie_session_id == ''

unless cookie_session_id
  print "Content-type: text/html\n\n"
  print %(
  <html lang="en">
    <body onload="reSignIn()"></body>
    <script>
      function reSignIn() {
        window.location = "https://tomcalendar.com";
      }
    </script>
  </html>
  )
  return
end

user_agent_str = ENV['HTTP_USER_AGENT'].downcase
IS_DESKTOP = !( /phone|android/.match(user_agent_str) )
VW_FACTOR   = IS_DESKTOP ? 0.3 : 1
VH_FACTOR   = IS_DESKTOP ? 1 : 1
FONT_FACTOR = IS_DESKTOP ? 1.25 : 1


# render dashboard
print "Content-type: text/html\n\n"
print %(
<html lang="en">
  <title>Dashboard</title>
  <head>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width,initial-scale=1">
  </head>
  <body onload="onNavIconSelect('explore'); init();">
    <div id="background">
      <div id="navbar">
        <i class="material-icons md-36 nav select" id="explore" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onNavIconSelect(this.id)">explore</i>
        <div class="navbar_space"></div>
        <i class="material-icons md-36 nav select" id="search" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onNavIconSelect(this.id)">search</i>
        <i class="material-icons md-36 nav create" id="create" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onCreate()">create</i>
        <i class="material-icons md-36 nav select" id="profile" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onNavIconSelect(this.id)">person</i>
        <div class="navbar_space"></div>
        <i class="material-icons md-36 nav select" id="settings" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onNavIconSelect(this.id)">settings</i>
      </div>
      <div class="page", id="explore_page">
        <h1>explore</h1>
      </div>
      <div class="page", id="search_page">
        <h1>search</h1>
      </div>
      <div class="page", id="profile_page">
        <h1>profile</h1>
      </div>
      <div class="page", id="settings_page">
        <h1 style="text-align:left;font-size:#{12 * FONT_FACTOR}rem;margin-left:#{6 * VW_FACTOR}vw;margin-top:#{6 * VH_FACTOR}vh">Settings</h1>
        <div style="border-bottom-style:solid; border-width:thin; border-color:#E8E8EB;"></div>
        <div class="settings_btn" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onViewSessions()">Sessions<i class="material-icons md-36 settings_navigate_next">navigate_next</i></div>
        <div class="settings_btn" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onDeactivate()">Deactivate account<i class="material-icons md-36 settings_navigate_next">navigate_next</i></div>
        <button id="log_out_btn" #{( IS_DESKTOP ? 'onclick' : 'ontouchend' )}="signOut()">Log out</button>
      </div>
      <div class="page", id="sessions_page">
        <div class="sessions_page_header">
          <i class="material-icons md-36 settings_navigate_before" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="current_settings_page='settings';onNavIconSelect('settings')">keyboard_backspace</i>
          <div class="settings_page_title">Sessions</div>
        </div>
        <div style="border-bottom-style:solid;margin-top:#{4 * VH_FACTOR}vh; border-width:thin; border-color:#E8E8EB;"></div>
      </div>
      <div class="page", id="deactivate_page">
        <div class="sessions_page_header">
          <i class="material-icons md-36 settings_navigate_before" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="current_settings_page='settings';onNavIconSelect('settings')">keyboard_backspace</i>
          <div class="settings_page_title">Deactivate account</div> 
        </div>
        <div style="text-align:left;margin-left:#{6 * VW_FACTOR}vw;margin-top:#{2 * VH_FACTOR}vh;">
          <h2 style="font-size:#{4 * FONT_FACTOR}rem;">This action is permanent</h2>
          <ul style="font-size:#{4 * FONT_FACTOR}rem;">
            <li>You CAN NOT restore your TomCalendar account after deactivation.</li>
            <li>Some account information may still be available in search engines, such as Google or Bing.</li>
            <li>All Tomcalendar events in your Google Calendar will be deleted.</li>
          </ul>
        </div>
      </div>
    </div>
  </body>
  <div id="popup_close_layer" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="onCreateClose();"></div>
  <div id="create_form">
    <i class="material-icons md-36 create_close" id="create_close" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="onCreateClose()">close</i>
    <button id="save_event_btn" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="saveEvent()">Save</button>
    <div id="create_form_title"><input type="text" id="create_form_title_input" placeholder="Add title"></div>
    <div id="start_date" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="toggleDate('start')"><input type="text" id="start_datepicker_txt" placeholder="Add start date" readonly></div>
    <div id="start_time" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="toggleTime('start')"><input type="text" id="start_timepicker_txt" placeholder="Add start time" readonly></div>
    <div class="date_wheel_picker" id="start_datepicker">
      <div class="date_wheel_select_box_cover_top"></div>
      <div class="date_wheel_select_box"></div>
      <div class="date_wheel_select_box_cover_bottom"></div>
      <ul class="month_wheel" id="start_month_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li><li>January</li><li>February</li><li>March</li><li>April</li><li>May</li><li>June</li><li>July</li><li>August</li><li>September</li><li>October</li><li>November</li><li>December</li><li></li></ul>
      <ul class="day_wheel" id="start_day_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li id="start_day_29">29</li><li id="start_day_30">30</li><li id="start_day_31">31</li><li></li></ul>
      <ul class="year_wheel" id="start_year_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li></ul>
    </div>
    <div class="time_wheel_picker" id="start_timepicker">
      <div class="time_wheel_select_box_cover_top"></div>
      <div class="time_wheel_select_box"></div>
      <div class="time_wheel_select_box_cover_bottom"></div>
      <ul class="hour_wheel" id="start_hour_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li></li></ul>
      <ul class="minute_wheel" id="start_minute_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>00</li><li>05</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li><li></li></ul>
      <ul class="period_wheel" id="start_period_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>AM</li><li>PM</li><li></li></ul>
    </div>
    <div style="width:100%;height:#{0 * VH_FACTOR}vh;display:inline-block;"></div>
    <div id="end_date" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="toggleDate('end')"><input type="text" id="end_datepicker_txt" placeholder="Add end date" readonly></div>
    <div id="end_time" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="toggleTime('end')"><input type="text" id="end_timepicker_txt" placeholder="Add end time " readonly></div><!-- extra space character in placeholder is for txt alignment -->
    <div class="date_wheel_picker" id="end_datepicker">
      <div class="date_wheel_select_box_cover_top"></div>
      <div class="date_wheel_select_box"></div>
      <div class="date_wheel_select_box_cover_bottom"></div>
      <ul class="month_wheel" id="end_month_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li><li>January</li><li>February</li><li>March</li><li>April</li><li>May</li><li>June</li><li>July</li><li>August</li><li>September</li><li>October</li><li>November</li><li>December</li><li></li></ul>
      <ul class="day_wheel" id="end_day_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li id="end_day_29">29</li><li id="end_day_30">30</li><li id="end_day_31">31</li><li></li></ul>
      <ul class="year_wheel" id="end_year_wheel" onscroll="onDateWheelScroll(this.id)"><li></li><li>TBD</li></ul>
    </div>
    <div class="time_wheel_picker" id="end_timepicker">
      <div class="time_wheel_select_box_cover_top"></div>
      <div class="time_wheel_select_box"></div>
      <div class="time_wheel_select_box_cover_bottom"></div>
      <ul class="hour_wheel" id="end_hour_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li></li></ul>
      <ul class="minute_wheel" id="end_minute_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>00</li><li>05</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li><li></li></ul>
      <ul class="period_wheel" id="end_period_wheel" onscroll="onTimeWheelScroll(this.id)"><li></li><li>TBD</li><li>AM</li><li>PM</li><li></li></ul>
    </div>
    <div style="width:100%;height:#{0 * VH_FACTOR}vh;display:inline-block;"></div>
    <div id="time_zone" #{( IS_DESKTOP ? 'onmousedown' : 'onclick' )}="onTimeZone()"><i class="material-icons md-36" id="time_zone_icon">public</i><input type="text" id="time_zone_txt" placeholder="Time zone" readonly></div>
  </div>
  <script>
    var current_settings_page = "settings";
    var months = {
      'January'   : '00',
      'February'  : '01',
      'March'     : '02',
      'April'     : '03',
      'May'       : '04',
      'June'      : '05',
      'July'      : '06',
      'August'    : '07',
      'September' : '08',
      'October'   : '09',
      'November'  : '10',
      'December'  : '11'
    }
    var data_selected_value = {}; // maps an element id to its current_value (made to replace data attributes)
    var scroll_tops = {
      'start_month_wheel'  : 0,
      'start_year_wheel'   : 0,
      'start_day_wheel'    : 0,
      'start_hour_wheel'   : 0,
      'start_minute_wheel' : 0,
      'start_period_wheel' : 0,
      'end_month_wheel'    : 0,
      'end_year_wheel'     : 0,
      'end_day_wheel'      : 0,
      'end_hour_wheel'     : 0,
      'end_minute_wheel'   : 0,
      'end_period_wheel'   : 0
    }
    var sync_end_date = true;
    var sync_end_time = true;
    var timers = {
      'start_month_wheel'  : -1,
      'start_year_wheel'   : -1,
      'start_day_wheel'    : -1,
      'start_hour_wheel'   : -1,
      'start_minute_wheel' : -1,
      'start_period_wheel' : -1,
      'end_month_wheel'    : -1,
      'end_year_wheel'     : -1,
      'end_day_wheel'      : -1,
      'end_hour_wheel'     : -1,
      'end_minute_wheel'   : -1,
      'end_period_wheel'   : -1
    }
    function init() {
      var http = new XMLHttpRequest();
      http.open('POST', 'validate_tokens_and_load_initial_content', true);
      http.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
      http.onload = function() {
        if(http.status == 200) {
          result = JSON.parse(http.responseText);

          if (result["is_valid"]) {
            // handle initial data load
            
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'create_tomcalendar_if_needed', true);
            xhr.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
            xhr.send('');

            // @remember: should probably post request to fix potential out of sync event changes (should make sure occurs after calendar is created)
          } else {
            localStorage.removeItem("session_id");
            document.cookie = "session_id=;secure";
            window.location = "https://tomcalendar.com/";
          }
        }
      }
      http.send('');

      var request = new XMLHttpRequest();
      request.open('POST', 'load_settings_data', true);
      request.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
      request.onload = function() {
        if(request.status == 200) {
          result = JSON.parse(request.responseText);

          var deactivate_page       = document.getElementById("deactivate_page");
          var sessions_page         = document.getElementById("sessions_page");
          var sessions              = result['sessions'];
          var current_session_index = result['current_session_index'];

          // swap first sesions with active session
          var first_session = sessions[0];
          sessions[0] = sessions[current_session_index];
          sessions[current_session_index] = first_session;

          let phone_regex = /phone|android/;
          var session_icon_type = "smartphone";
          if (sessions[0]['device_type'].toLowerCase().match(phone_regex) == null) {
            session_icon_type = "computer";
          }

          sessions_page.insertAdjacentHTML("beforeend", `
            <div class="session_widget" id="active_session_widget">
              <i class="material-icons md-36 session_icon">${session_icon_type}</i>
              <div style="display:inline-block;width:#{2 * VW_FACTOR}vw"></div>
              <span class="session_device_type">${sessions[0]['device_type']}</span>
              <div style="display:inline-block;width:#{1 * VW_FACTOR}vw"></div>
              <span class="session_last_updated" style="color: green;">Active now</span>
            </div>
          `);
          
          for(var i=1; i < sessions.length; i++) {
            // @remember: need more robust device type checking for sessions
            session_icon_type = "smartphone";
            if (sessions[i]['device_type'].toLowerCase().match(phone_regex) == null) {
              session_icon_type = "computer";
            }
            sessions_page.insertAdjacentHTML("beforeend", `
              <div class="session_widget" id=${sessions[i]['device_id']}>
                <i class="material-icons md-36 session_icon">${session_icon_type}</i>
                <div style="display:inline-block;width:#{2 * VW_FACTOR}vw"></div>
                <span class="session_device_type">${sessions[i]['device_type']}</span>
                <div style="display:inline-block;width:#{1 * VW_FACTOR}vw"></div>
                <span class="session_last_updated">${sessions[i]['last_active']}</span>
                <div class="session_log_out" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="logOutSession('${sessions[i]['device_id']}');">Log out</div>
              </div>
            `);
          }

          sessions_page.insertAdjacentHTML("beforeend", `
            <div style="margin-top:#{4 * VH_FACTOR}vh;"></div>
            <div id="all_sessions_log_out" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="logOutAllOtherSessions();">Log out all other sessions</div>
          `);

          deactivate_page.insertAdjacentHTML("beforeend", `
            <div id="deactivate_btn" style="margin-top:#{2 * VH_FACTOR}vh;" #{( IS_DESKTOP ? 'onmousedown' : 'ontouchstart' )}="confirmRevoke('${result['deactivation_code']}');">Deactivate my account</div>
          `);
        }
      }
      request.send('');

      // initialize wheel pickers
      var start_year_wheel = document.getElementById("start_year_wheel");
      var end_year_wheel = document.getElementById("end_year_wheel");
      var current_year = new Date().getFullYear();
      for(var i=current_year; i < (current_year + 101); i++) { 
        start_year_wheel.insertAdjacentHTML("beforeend", `<li>${i}</li>`);
        end_year_wheel.insertAdjacentHTML("beforeend", `<li>${i}</li>`);
      }
      start_year_wheel.insertAdjacentHTML("beforeend", `
        <li></li>
      `);
      end_year_wheel.insertAdjacentHTML("beforeend", `
        <li></li>
      `);
      hideExtraDaysOnDayWheelPickers();
    }
    function signOut() {
      document.getElementById("background").style.webkitFilter = "blur(100px)";
      var http = new XMLHttpRequest();
      http.open('POST', 'sign_out', true);
      http.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
      http.onload = function() {
        if(http.status == 200) {
          localStorage.removeItem("session_id");
          document.cookie = "session_id=;secure";
          window.location = "https://tomcalendar.com/";
        }
      }
      http.send('');
    }
    function confirmRevoke(code) {
      if (window.confirm("Deactivating your account will delete all your TomCalendar events from your google calendar. Are you sure you want to deactivate your account?")) {
        document.getElementById("background").style.webkitFilter = "blur(100px)";
        var http = new XMLHttpRequest();
        http.open('POST', 'deactivate_tomcalendar', true);
        http.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
        http.onload = function() {
          if(http.status == 200) {
            localStorage.removeItem("session_id");
            document.cookie = "session_id=;secure";
            window.location = "https://tomcalendar.com/";
          }
        }
        http.send(code);
      }
    }
    function logOutAllOtherSessions() {
      var all_session_widgets = document.getElementsByClassName("session_widget");
      var non_active_session_widget_ids = [];
      for(var i=0; i < all_session_widgets.length; i++) {
        if (all_session_widgets[i].id != "active_session_widget") {
          non_active_session_widget_ids.push(all_session_widgets[i].id);
        }
      }
      for(var i=0; i < non_active_session_widget_ids.length; i++) {
        document.getElementById(non_active_session_widget_ids[i]).remove();
      }

      var http = new XMLHttpRequest();
      http.open('POST', 'log_out_all_other_sessions', true);
      http.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
      http.send('');
    }
    function logOutSession(session_index) {
      var http = new XMLHttpRequest();
      http.open('POST', 'sign_out', true);
      http.setRequestHeader('Content-type', 'application/octet-stream; charset=utf-8');
      http.send(session_index);
      
      var session_widget = document.getElementById(session_index);
      session_widget.remove();

      document.getElementById("all_sessions_log_out").blur(); // this fixes auto focus bug on mobile
    }
    function onNavIconSelect(nav_icon_id) {
      unactivateAllNavIcons();
      unactivateAllPages();
      var nav_icon = document.getElementById(nav_icon_id);
      nav_icon.style.color = "black";

      if(nav_icon_id != 'settings') {
        document.body.style.backgroundColor = "#FEFFFE";
        var page = document.getElementById(nav_icon_id + "_page")
      }
      else {
        document.body.style.backgroundColor = "#F2F2F7";
        var page = document.getElementById(current_settings_page + "_page");
      }

      page.style.display = "block";
    }
    function onCreate() {
      var create_form = document.getElementById("create_form");
      var popup_close_layer = document.getElementById("popup_close_layer");
      popup_close_layer.style.display = "block";
      create_form.style.display = "block";
    }
    function onCreateClose() {
      var create_form = document.getElementById("create_form");
      var popup_close_layer = document.getElementById("popup_close_layer");
      popup_close_layer.style.display = "none";
      create_form.style.display = "none";

      sync_end_date = true;
      sync_end_time = true;
      Object.keys(scroll_tops).forEach(value => scroll_tops[value] = 0);

      var create_form_title_input = document.getElementById("create_form_title_input");
      create_form_title_input.blur();
      create_form_title_input.value = "";
      var start_datepicker = document.getElementById("start_datepicker");
      if (start_datepicker.style != 'none') {
        start_datepicker.style = 'none';
        document.getElementById("start_datepicker_txt").value = "";
      }
      var end_datepicker = document.getElementById("end_datepicker");
      if (end_datepicker.style != 'none') {
        end_datepicker.style = 'none';
        document.getElementById("end_datepicker_txt").value = "";
      }
      var start_timepicker = document.getElementById("start_timepicker");
      if (start_timepicker.style != 'none') {
        start_timepicker.style = 'none';
        document.getElementById("start_timepicker_txt").value = "";
      }
      var end_timepicker = document.getElementById("end_timepicker");
      if (end_timepicker.style != 'none') {
        end_timepicker.style = 'none';
        document.getElementById("end_timepicker_txt").value = "";
      }
    }
    function unactivateAllNavIcons() {
      var all_nav_icons = document.getElementsByClassName("material-icons nav select");
      for(var i = 0; i < all_nav_icons.length; i++){
        all_nav_icons[i].style.color = "rgba(0, 0, 0, .6)";
      }
    }
    function unactivateAllPages() {
      var all_pages = document.getElementsByClassName("page");
      for(var i = 0; i < all_pages.length; i++){
        all_pages[i].style.display = "none";
      }
    }
    function onViewSessions() {
      unactivateAllPages();
      current_settings_page = "sessions";
      var sessions_page = document.getElementById("sessions_page");
      sessions_page.style.display = "block";
    }
    function onDeactivate() {
      unactivateAllPages();
      current_settings_page = "deactivate";
      var deactivate_page = document.getElementById("deactivate_page");
      deactivate_page.style.display = "block";
    }
    function saveEvent() {
      // save stuff
      // clear form

      onCreateClose();
    }
    function hideExtraDaysOnDayWheelPickers() {
      ["start","end"].forEach(function(date) {
        var year  = data_selected_value[`${date}_year_wheel`];
        var month = data_selected_value[`${date}_month_wheel`];
        var day   = data_selected_value[`${date}_day_wheel`];

        var is_year_not_selected = !year || (year == "TBD");
        var is_month_selected    = month && (month != "TBD");

        for(var i=29; i <= 31 ; i++) {
          document.getElementById(`${date}_day_` + i).style.display = "none";
        }

        if (is_month_selected) {
          if (is_year_not_selected) {
            if (month != "February") {
              year = 2021;  // year is arbitrary
            }
            else
            {
              return; // default to 28 days if no month selected
            }
          }

          var last_day_in_month = new Date(parseInt(year), parseInt(months[month]) + 1, 0).getDate();
          for(var i=29; i <= last_day_in_month; i++) {
            document.getElementById(`${date}_day_` + i).style.display = "block";
          }
        }
      });
    }
    function onDateWheelScroll(id) {
      if (timers[id] != -1) {
        clearTimeout(timers[id]);
      }
      timers[id] = window.setTimeout(function(){
        var date_wheel = document.getElementById(id);
        var index = Math.round(date_wheel.scrollTop / date_wheel.childNodes[0].offsetHeight) + 1;  // +1 handles empty li
        var all_date_wheel_elements = date_wheel.getElementsByTagName("li");
        if (index < all_date_wheel_elements.length) {
          data_selected_value[id] = all_date_wheel_elements[index].innerText;
        }
        hideExtraDaysOnDayWheelPickers();
        var end_date_str = updateCreateFormDate(id);

        if ( sync_end_date && (RegExp('start').test(id)) ) {
          document.getElementById("end_datepicker_txt").value = end_date_str;
          scroll_tops["end_month_wheel"] = document.getElementById("start_month_wheel").scrollTop;
          scroll_tops["end_day_wheel"]   = document.getElementById("start_day_wheel").scrollTop;
          scroll_tops["end_year_wheel"]  = document.getElementById("start_year_wheel").scrollTop;
        }

        scroll_tops[id] = date_wheel.scrollTop;
      }, 300);
    }
    function toggleDate(start_or_end_str) {
      document.getElementById("start_timepicker").style.display = "none";
      document.getElementById("end_timepicker").style.display = "none";
      if (start_or_end_str == "start") {
        document.getElementById("end_datepicker").style.display = "none";
      }
      else {
        document.getElementById("start_datepicker").style.display = "none";
      }

      var datepicker = document.getElementById(`${start_or_end_str}_datepicker`);

      if (datepicker.style.display != "inline-block") {
        datepicker.style.display = "inline-block";
      }
      else {
        datepicker.style.display = "none";
      }
      
      // update wheel scrollTops
      document.getElementById("start_month_wheel").scrollTop = scroll_tops["start_month_wheel"];
      document.getElementById("start_day_wheel").scrollTop   = scroll_tops["start_day_wheel"];
      document.getElementById("start_year_wheel").scrollTop  = scroll_tops["start_year_wheel"];
      document.getElementById("end_month_wheel").scrollTop   = scroll_tops["end_month_wheel"];
      document.getElementById("end_day_wheel").scrollTop     = scroll_tops["end_day_wheel"];
      document.getElementById("end_year_wheel").scrollTop    = scroll_tops["end_year_wheel"];

      // sync start and end date until user edits end date
      if (start_or_end_str === "end") {
        sync_end_date = (document.getElementById("end_datepicker_txt").value === "");
      }
    }
    function updateCreateFormDate(current_wheel_id) {
      var date = RegExp('start').test(current_wheel_id) ? "start": "end";

      var datepicker_txt = document.getElementById(`${date}_datepicker_txt`);
      var year  = data_selected_value[`${date}_year_wheel`];
      var month = data_selected_value[`${date}_month_wheel`];
      var day   = data_selected_value[`${date}_day_wheel`];

      var date_str = "";
      if (month && (month != "TBD")) {
        if (day && (day != "TBD") && year && (year != "TBD")) {
          date_str += month.slice(0,3);
        }
        else {
          date_str += month;
        }

        if (day && (day != "TBD")) {
          date_str += (' ' + day);
        }
      }

      if (year && (year != "TBD")) {
        if(month && (month != "TBD")) {
          date_str += ', ';
        }
        date_str += year;
      }

      datepicker_txt.value = date_str;
      return date_str;
    }
    function onTimeWheelScroll(id) {
      if (timers[id] != -1) {
        clearTimeout(timers[id]);
      }

      timers[id] = window.setTimeout(function(){
        var time_wheel = document.getElementById(id);
        var index = Math.round(time_wheel.scrollTop / time_wheel.childNodes[0].offsetHeight) + 1; // +1 handles empty li
        var all_time_wheel_elements = time_wheel.getElementsByTagName("li");
        data_selected_value[id] = all_time_wheel_elements[index].innerText;
        var offset_time_str = updateCreateFormTime(id);

        if ( sync_end_time && (RegExp('start').test(id)) ) {
          document.getElementById("end_timepicker_txt").value = offset_time_str;
          var start_hour_wheel = document.getElementById("start_hour_wheel");
          if (data_selected_value["start_hour_wheel"]) {
            if (data_selected_value["start_hour_wheel"] != "TBD") {
              scroll_tops["end_hour_wheel"] = start_hour_wheel.scrollTop + start_hour_wheel.childNodes[0].offsetHeight;
            }
            scroll_tops["end_minute_wheel"] = document.getElementById("start_minute_wheel").scrollTop;
            if (data_selected_value["start_hour_wheel"] != 11) {
              scroll_tops["end_period_wheel"] = document.getElementById("start_period_wheel").scrollTop;
            } else {
              if (data_selected_value["start_period_wheel"] == "AM") {
                scroll_tops["end_period_wheel"] = document.getElementById("start_period_wheel").scrollTop + document.getElementById("start_period_wheel").childNodes[0].offsetHeight;
              } else if (data_selected_value["start_period_wheel"] == "PM") {
                scroll_tops["end_period_wheel"] = document.getElementById("start_period_wheel").scrollTop - document.getElementById("start_period_wheel").childNodes[0].offsetHeight;
              }
            }
          }
        }
        scroll_tops[id] = time_wheel.scrollTop;
      }, 300);
    }
    function toggleTime(start_or_end_str) {
      document.getElementById("start_datepicker").style.display = "none";
      document.getElementById("end_datepicker").style.display = "none";

      if (start_or_end_str == "start") {
        document.getElementById("end_timepicker").style.display = "none";
      }
      else {
        document.getElementById("start_timepicker").style.display = "none";
      }

      var timepicker = document.getElementById(`${start_or_end_str}_timepicker`);
      if (timepicker.style.display != "inline-block") {
        timepicker.style.display = "inline-block";
      }
      else {
        timepicker.style.display = "none";
      }

      // update wheel scrollTops
      document.getElementById("start_hour_wheel").scrollTop   = scroll_tops["start_hour_wheel"];
      document.getElementById("start_minute_wheel").scrollTop = scroll_tops["start_minute_wheel"];
      document.getElementById("start_period_wheel").scrollTop = scroll_tops["start_period_wheel"];
      document.getElementById("end_hour_wheel").scrollTop     = scroll_tops["end_hour_wheel"];
      document.getElementById("end_minute_wheel").scrollTop   = scroll_tops["end_minute_wheel"];
      document.getElementById("end_period_wheel").scrollTop   = scroll_tops["end_period_wheel"];

      // sync start and end date until user edits end date
      if (start_or_end_str === "end") {
        sync_end_time = (document.getElementById("end_timepicker_txt").value === "");
      }
    }
    function updateCreateFormTime(current_wheel_id) {
      var date = RegExp('start').test(current_wheel_id) ? "start": "end";

      var timepicker_txt = document.getElementById(`${date}_timepicker_txt`);
      var hour = data_selected_value[`${date}_hour_wheel`];
      var minute = data_selected_value[`${date}_minute_wheel`];
      var period = data_selected_value[`${date}_period_wheel`];

      var time_str = "";
      var offset_time_str = "";
      var switch_period = false;

      if (hour && (hour != "TBD")) {
        time_str += hour;
        var offset_hour = parseInt(hour) + 1;
        if (hour == 11) {
          switch_period = true;
        }
        if (offset_hour > 12) {
          offset_hour = 1;
        }
        offset_time_str += offset_hour;
        
        if ( minute && (minute != "00") && (minute != "TBD")) {
          time_str += ':';
          time_str += minute;
          offset_time_str += ':';
          offset_time_str += minute;
        }
        if ( period && (period != "TBD")) {
          time_str += ' ';
          time_str += period;

          offset_time_str += ' ';
          if (switch_period) {
            if (period == "AM") {
              offset_time_str += "PM";
            } else if (period == "PM") {
              offset_time_str += "AM";
            }
          }
          else {
            offset_time_str += period;
          }
        }
      }

      timepicker_txt.value = time_str;
      return offset_time_str;
    }
    function onTimeZone() {
    }
  </script>
  <style>
    html {
      text-align: center;
      border: none;
      font-family: 'Roboto', sans-serif;
      font-size: 4px;
    }
    body {
      background-color: #FEFFFE;
    }
    #navbar {
      margin: 0;
      background-color: rgba(254, 255, 254, .7);
      width: 100%;
      overflow: auto;
      border-bottom-style: solid;
      border-width: thin;
      border-color: #E8E8EB;
      position: fixed;
      top: 0;
      left: 0;
    }
    #background {
      border: none;
      transition: filter 5s;
    }
    .navbar_space {
      width: #{12 * VW_FACTOR}vw;
      display: inline-block;
    }
    #create_form {
      display: none;
      position: fixed;
      width: #{( IS_DESKTOP ? '80' : '100' )}%;
      height: #{( IS_DESKTOP ? '80' : '100' )}%;
      margin-top: #{( IS_DESKTOP ? '5' : '0' )}%;
      margin-left: #{( IS_DESKTOP ? '10' : '0' )}%;
      text-align: center;
      border-radius: #{( IS_DESKTOP ? '25' : '0' )}px;
      border-color: white;
      background-color: white;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
    }
    #popup_close_layer {
      display: none;
      width: 100%;
      height: 100%;
      position: fixed;
      background-color: rgba(0, 0, 0, 0.5);
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
    }
    .page {
      display: none;
      position: absolute;
      border: none;
      left: 0;
      right: 0;
      margin-top: #{7 * VH_FACTOR}vh;
    }
    .material-icons {
      cursor: default;
    }
    .material-icons.nav {
      margin-top: #{1.5 * VH_FACTOR}vh;
      margin-bottom: #{0.75 * VH_FACTOR}vh;
      font-size: #{7.5 * FONT_FACTOR}rem;
      color: #000000;
      text-align: center;
      transition: color .175s;
      transition-timing-function: ease-out;
    }
    .material-icons.nav.select {
      color: #000000;
      cursor: pointer;
    }
    .material-icons.nav.create {
      color: #0F9D58;
      border-style: solid;
      border-color: #4285F4;
      border-width: #{( IS_DESKTOP ? '3' : '2' )}px;
      border-radius: 8%; 
      padding-right:  #{3 * VW_FACTOR}vw;
      margin-right:   #{9 * VW_FACTOR}vw;
      padding-left:   #{3 * VW_FACTOR}vw;
      margin-left:    #{9 * VW_FACTOR}vw;
      cursor: pointer;
      transition: background-color .175s;
      transition-timing-function: ease-out;
    }
    .material-icons.nav.create:hover {
      background-color: #EEEEEE;
    }
    .material-icons.create_close {
      float: left;
      margin-left: #{4 * VW_FACTOR}vw;
      margin-top: #{2 * VH_FACTOR}vh;
      cursor: pointer;
      border-radius: 50px;
      font-size: #{7 * FONT_FACTOR}rem;
      color: #616161;
      padding: 6px;
    }
    .material-icons.create_close:hover {
      background-color: #EEEEEE;
    }
    .material-icons.search {
      float: left;
      margin-top: 4px;
      margin-left: 8px;
      margin-right: 2px;
    }
    .search_bar {
      border: solid;
      border-radius: 25px;
      border-width: 1.5px;
      border-color: black;
      width: 512;
      height: 32;
      margin-top: 8px;
      margin-left: 64px;
      float: left;
      transition: box-shadow .175s, height .175s, width .175s;
      transition-timing-function: ease-out;
    }
    .search_bar:hover {
      box-shadow: 0px 0px 4px black;
      border: none;
      width: 514;
      height: 33;
    }
    .search_bar:focus-within {
      box-shadow: 0px 0px 4px black;
      border: none;
      width: 514;
      height: 33;
    }
    .search_bar input[type=text] {
      float: left;
      padding: 12px;
      border: none;
      color: black;
      width: 470;
      height: 20px;
      margin-top: 4px;
      font-size: 16px;
    }
    #navbar input[type=text]:focus {
      outline: none;
    }
    #navbar input::placeholder {
      color: black;
      opacity: .75;
    }
    #log_out_btn {
      display: inline-block;
      width: 100%;
      height: #{5.25 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      font-weight: bold;
      outline: none;
      border-top-style: solid;
      border-right-style: hidden;
      border-left-style: hidden;
      border-bottom-style: solid;
      border-width: thin;
      border-color: #E8E8EB;
      border-radius: 0;
      cursor: pointer;
      background-color: rgba(254, 255, 254, 1);
      transition: background-color .175s;
      transition-timing-function: ease-out;
      text-align: center;
      margin-top: #{4 * VH_FACTOR}vh;
      color: #0F82FF;
    }
    #log_out_btn:hover {
      background-color: #f1fff1;
    }
    #log_out_btn:active {
      background-color: #e5ffe5;
    }
    #create_form_title input[type=text] {
      float: left;
      border-top-style: hidden;
      border-right-style: hidden;
      border-left-style: hidden;
      border-bottom-style: solid;
      border-bottom-width: 1px;
      border-bottom-color: #E8E8EB;
      border-radius: 0;
      width: 100%;
      height: #{6 * VH_FACTOR}vh;
      font-size: #{6 * FONT_FACTOR}rem;
      margin-top: #{1.5 * VH_FACTOR}vh;
      color: #424242;
      background-color: white;
      text-align: center;
    }
    #create_form_title input[type=text]:focus {
      border-color: #2962FF;
      outline: none;
    }
    #create_form_title input::placeholder {
      color: #757575;
    }
    #start_date {
      display: inline-block;
      float: left;
      margin-top: #{2 * VH_FACTOR}vh;
      margin-left: #{14 * VW_FACTOR}vw;
      z-index: 1;
    }
    #end_date {
      display: inline-block;
      float: left;
      margin-left: #{14 * VW_FACTOR}vw;
      z-index: 1;
      margin-top: #{1.25 * VH_FACTOR}vh
    }
    #start_date input[type=text], #end_date input[type=text] {
      border: none;
      width: #{38 * VW_FACTOR}vw;
      height: #{4 * VH_FACTOR}vh;
      background-color: white;
      color: #424242;
      font-size: #{4 * FONT_FACTOR}rem;
      float: left;
    }
    #start_date input::placeholder, #start_time input::placeholder, #end_date input::placeholder, #end_time input::placeholder {
      color: #757575;
    }
    #start_date input[type=text]:focus, #start_time input[type=text]:focus, #end_date input[type=text]:focus, #end_time input[type=text]:focus {
      outline: none;
    }
    #start_time {
      display: inline-block;
      float: right;
      right: 0;
      margin-top: #{2 * VH_FACTOR}vh;
      z-index: 1;
    }
    #end_time {
      display: inline-block;
      float: right;
      right: 0;
      z-index: 1;
      margin-top: #{1.25 * VH_FACTOR}vh
    }
    #start_time input[type=text], #end_time input[type=text] {
      border: none;
      width: #{38 * VW_FACTOR}vw;
      height: #{4 * VH_FACTOR}vh;
      background-color: white;
      color: #424242;
      font-size: #{4 * FONT_FACTOR}rem;
      text-align: right;
      margin-right: 4vw;
    }
    .sessions_page_header {
      width: 100%;
      height: #{6 * VH_FACTOR}vh;
      margin-top: #{0.75 * VH_FACTOR}vh;
    }
    .settings_btn {
      display: inline-block;
      width: #{100 - (6 * VW_FACTOR)}vw;
      height: #{5.25 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      outline: none;
      text-align: left;
      line-height: #{5.25 * VH_FACTOR}vh;
      padding-left: #{6 * VW_FACTOR}vw;
      border-right-style: hidden;
      border-left-style: hidden;
      border-top-style: hidden;
      border-bottom-style: solid;
      border-width: thin;
      border-color: #E8E8EB;
      border-radius: 0;
      cursor: pointer;
      background-color: rgba(254, 255, 254, 1);
      transition: background-color .175s;
      transition-timing-function: ease-out;
      color: black;
    }
    .settings_btn:hover {
      background-color: #f1fff1;
    }
    .settings_btn:active {
      background-color: #e5ffe5;
    }
    .settings_navigate_next {
      font-size: #{8 * FONT_FACTOR}rem;
      float: right;
      line-height: #{5.25 * VH_FACTOR}vh;
      margin-right: #{4 * VW_FACTOR}vw;
      color: #616161;
      cursor: pointer;
    }
    .settings_navigate_before {
      float:left;
      margin-left: #{4 * VW_FACTOR}vw;
      line-height: #{6 * VH_FACTOR}vh;
      font-size: #{8 * FONT_FACTOR}rem;
      color: #0F82FF;
      cursor: pointer;
      vertical-align: middle;
      display:inline-block;
    }
    .settings_page_title {
      text-align: center;
      font-size: #{8 * FONT_FACTOR}rem;
      line-height: #{6 * VH_FACTOR}vh;
      float:left;
      vertical-align: middle;
      margin-left: #{7 * VW_FACTOR}vw;
    }
    .session_widget {
      display: inline-block;
      width: #{100 - (6 * VW_FACTOR)}vw;
      height: #{7 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      outline: none;
      text-align: left;
      line-height: #{7 * VH_FACTOR}vh;
      padding-left: #{6 * VW_FACTOR}vw;
      border-right-style: hidden;
      border-left-style: hidden;
      border-top-style: hidden;
      border-bottom-style: solid;
      border-width: thin;
      border-color: #E8E8EB;
      border-radius: 0;
      background-color: rgba(254, 255, 254, 1);
      color: black;
    }
    .material-icons.session_icon {
      font-size: #{10 * FONT_FACTOR}rem;
      vertical-align: middle;
    }
    .session_device_type {
      font-size: #{4 * FONT_FACTOR}rem;
    }
    .session_last_updated {
      font-size: #{3 * FONT_FACTOR}rem;
      color: #757575;
    }
    .session_log_out {
      display: inline-block;
      font-size: #{4 * FONT_FACTOR}rem;
      color: red;
      float: right;
      padding-right: #{8 * VW_FACTOR}vw;
      padding-left: #{4 * VW_FACTOR}vw;
      cursor: pointer;
    }
    #all_sessions_log_out {
      display: inline-block;
      width: 100%;
      height: #{5 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      font-weight: bold;
      outline: none;
      border-top-style: solid;
      border-right-style: hidden;
      border-left-style: hidden;
      border-bottom-style: solid;
      border-width: thin;
      border-color: #E8E8EB;
      border-radius: 0;
      cursor: pointer;
      background-color: rgba(254, 255, 254, 1);
      transition: background-color .175s;
      transition-timing-function: ease-out;
      text-align: center;
      line-height: #{5 * VH_FACTOR}vh;
      color: #0F82FF;
    }
    #all_sessions_log_out:hover {
      background-color: #f1fff1;
    }
    #all_sessions_log_out:active {
      background-color: #e5ffe5;
    }
    #deactivate_btn {
      display: inline-block;
      height: #{5 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      font-weight: bold;
      outline: none;
      cursor: pointer;
      text-align: center;
      line-height: #{5 * VH_FACTOR}vh;
      color: #0F82FF;
    }
    #save_event_btn {
      margin: 0;
      padding: 0;
      float: right;
      background-color: #1A73E8;
      color: white;
      border: none;
      border-radius: 4px;
      height: #{4 * VH_FACTOR}vh;
      line-height: #{3.5 * VH_FACTOR}vh;
      width: #{16 * VW_FACTOR}vw;
      font-size: #{3.75 * FONT_FACTOR}rem;
      text-align: center;
      margin-right: #{5.25 * VW_FACTOR}vw;
      margin-top: #{2 * VH_FACTOR}vh;
      cursor: pointer;
      outline: none;
      font-weight: normal;
    }
    #save_event_btn:hover {
      background-color: #3986eb;
    }
    .date_wheel_picker, .time_wheel_picker {
      display: none;
      height: #{18 * VH_FACTOR}vh;  /* ( li height + li top and bottom padding ) x number of elements seen on wheel */
      width: 100%;
    }
    .month_wheel, .day_wheel, .year_wheel, .hour_wheel, .minute_wheel, .period_wheel {
      display: inline-block;
      height: 100%;
      overflow:hidden;
      overflow-y:scroll;
      scroll-snap-type: y mandatory;
      scroll-snap-type: proximity;
      text-align: center;
    }
    .month_wheel::-webkit-scrollbar, .day_wheel::-webkit-scrollbar, .year_wheel::-webkit-scrollbar, .hour_wheel::-webkit-scrollbar, .minute_wheel::-webkit-scrollbar, .period_wheel::-webkit-scrollbar {
      display: none;
    }
    .month_wheel {
      width: #{20 * VW_FACTOR}vw;
    }
    .day_wheel {
      width: #{10 * VW_FACTOR}vw;
    }
    .year_wheel {
      width: #{20 * VW_FACTOR}vw;
    }
    .hour_wheel, .minute_wheel, .period_wheel {
      width: #{10 * VW_FACTOR}vw;
    }
    .month_wheel li, .day_wheel li, .year_wheel li, .hour_wheel li, .minute_wheel li, .period_wheel li {
      list-style-type: none;
      padding-top: #{1.5 * VH_FACTOR}vh;
      padding-bottom: #{1.5 * VH_FACTOR}vh;
      font-size: #{4 * FONT_FACTOR}rem;
      font-weight: 1;
      scroll-snap-align: start;
      height: #{3 * VH_FACTOR}vh;
      line-height: #{3 * VH_FACTOR}vh;
      vertical-align: middle;
    }
    .date_wheel_select_box, .time_wheel_select_box {
      width: 95%;
      height: #{6 * VH_FACTOR}vh;
      background-color: rgba(238, 238, 239, 1);
      position: absolute;
      z-index: -1;
      border-radius: 8px;
      right: 0;
      left: 0;
      margin: auto;
      margin-top: #{6 * VH_FACTOR}vh;
    }
    .date_wheel_select_box_cover_top, .time_wheel_select_box_cover_top {
      width: 100%;
      height: #{6 * VH_FACTOR}vh;
      position: absolute;
      right: 0;
      left: 0;
      margin: auto;
      background-color: rgba(254, 255, 254, .5);
      pointer-events:none;
    }
    .date_wheel_select_box_cover_bottom, .time_wheel_select_box_cover_bottom {
      width: 100%;
      height: #{6 * VH_FACTOR}vh;
      position: absolute;
      right: 0;
      left: 0;
      margin: auto;
      margin-top: #{12 * VH_FACTOR}vh;
      background-color: rgba(254, 255, 254, .5);
      pointer-events:none;
    }
    #time_zone {
      height: #{4 * VH_FACTOR}vh;
      width: 100%;
    }
    #time_zone_icon {
      display: inline-block;
      float: left;
      height: #{4 * VH_FACTOR}vh;
      width: #{5 * VW_FACTOR}vw;
      margin-top: #{1.5 * VH_FACTOR}vh;
      margin-left: #{4.75 * VW_FACTOR}vw;
      margin-right: #{4 * VW_FACTOR}vw;
      line-height: #{4 * VH_FACTOR}vh;
    }
    #time_zone input[type=text] {
      border: none;
      width: #{38 * VW_FACTOR}vw;
      height: #{4 * VH_FACTOR}vh;
      background-color: white;
      color: #424242;
      font-size: #{4 * FONT_FACTOR}rem;
      float: left;
      outline: none;
      margin-top: #{1.5 * VH_FACTOR}vh;
      line-height: #{4 * VH_FACTOR}vh;
    }
  </style>
</html>
)
