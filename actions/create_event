#! /usr/bin/ruby

require_relative '../lib/tom_calendar.rb'
require 'aws-sdk-s3'

# @remember: should alert user if repeating event starts and ends on same day
# @current:  need to alert error if end time is before start time

cookie_session_id = ENV['HTTP_COOKIE']&.split(';')&.find{ |cookie| cookie.match?('session_id') }&.sub('session_id=','')&.strip
cookie_session_id = nil if cookie_session_id == ''

unless cookie_session_id
  print StatusCodeStr::BAD_REQUEST
  return
end

session_id    = JSON.parse(cookie_session_id)
request_input = JSON.parse(ARGF.first)

event = request_input
event['title'] = event['title']&.strip
event['google_id'] = session_id['google_id']
if event['image_extension'] && (event['image_extension'] != '')
  event['image_id'] = Digest::SHA256.hexdigest("#{event['google_id']}#{event['title']}")
end

unless ( event['title'] && (event['title'] != '') )
  print StatusCodeStr::BAD_REQUEST
  return;
end

begin
  dynamodb = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])

  check_event_params = {
    table_name: 'Events',
    key: { google_id: event['google_id'], title: event['title'] }
  }

  result_item = dynamodb.get_item(check_event_params)&.item
  if (result_item)
    print StatusCodeStr::BAD_REQUEST
    return;
  end

  upload_url = nil
  if event['image_id']
    aws_client = Aws::S3::Client.new(
      region:               ENV['AWS_REGION'],
      access_key_id:        ENV['AWS_ACCESS_KEY_ID'],
      secret_access_key:    ENV['AWS_SECRET_ACCESS_KEY']
    )
    s3 = Aws::S3::Resource.new(client: aws_client)
    bucket = s3.bucket('tomcalendareventimages')
    obj = bucket.object("#{event['image_id']}.#{event['image_extension']}")
    upload_url = obj.presigned_url(:put)
  end

  event_params = {
    table_name: 'Events',
    item: event
  }

  dynamodb.put_item(event_params)
rescue Exception => e
  raise e
end

`#{ENV['ROOT_DIR_PATH']}/tasks/create_google_calendar_event '#{event.to_json}' >/dev/null &`

print StatusCodeStr::plain_text(upload_url)
