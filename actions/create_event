#! /usr/bin/ruby

# @remember: should alert user if repeating event starts and ends on same day
# @remember: if user changes profile picture then all users events

cookie_session_id = TomEnv::get('HTTP_COOKIE')&.split(';')&.find{ |cookie| cookie.match?('session_id') }&.sub('session_id=','')&.strip
cookie_session_id = nil if cookie_session_id == ''

unless cookie_session_id
  return StatusCodeStr::BAD_REQUEST
end

session_id    = JSON.parse(cookie_session_id)
request_input = JSON.parse(TomEnv::get('MESSAGE'))

event = request_input
event['title'] = event['title']&.strip
event['google_id'] = session_id['google_id']
if event['image_extension'] && (event['image_extension'] != '')
  event['image_id'] = Digest::SHA256.hexdigest("#{event['google_id']}#{event['title']}")
end

unless ( event['title'] && (event['title'] != '') )
  return StatusCodeStr::bad_request_error_message('invalid title')
end

begin
  if ( event['start_date'] && (event['start_date'] != '') ) && ( event['end_date'] && (event['end_date'] != '') )
    start_date_time = Time.parse("#{event['start_date']} #{event['start_time']}").xmlschema[0..18]
    end_date_time   = Time.parse("#{event['end_date']} #{event['end_time']}").xmlschema[0..18]
    unless start_date_time <= end_date_time
      return StatusCodeStr::bad_request_error_message('invalid date')
    end
  end
rescue Exception => e
  # keep going
end

upload_url = nil
exponential_backoff do
  dynamodb = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])

  check_event_params = {
    table_name: 'Events',
    key: { google_id: event['google_id'], title: event['title'] }
  }

  result_item = dynamodb.get_item(check_event_params)&.item
  if (result_item)
    return StatusCodeStr::bad_request_error_message('invalid title')
  end

  upload_url = nil
  if event['image_id']
    aws_client = Aws::S3::Client.new(
      region:               ENV['AWS_REGION'],
      access_key_id:        ENV['AWS_ACCESS_KEY_ID'],
      secret_access_key:    ENV['AWS_SECRET_ACCESS_KEY']
    )
    s3 = Aws::S3::Resource.new(client: aws_client)
    bucket = s3.bucket('tomcalendareventimages')
    obj = bucket.object("#{event['image_id']}.#{event['image_extension']}")
    tmp_upload_url = obj.presigned_url(:put)
  else
    tmp_upload_url = ''
  end

  profile_item = dynamodb.get_item({ table_name: 'GoogleProfiles', key: {google_id: event['google_id']} })&.item
  event['creator_email'] = profile_item['email']
  event['creator_picture'] = profile_item['picture']

  params = {
    table_name: 'GoogleCalendarIDs',
    key: { google_id: event['google_id'] }
  }

  result_item = dynamodb.get_item(params)&.item || {}
  google_calendar_id = result_item['google_calendar_id']

  dynamodb.transact_write_items({
    transact_items: [
      { put: { table_name: 'Events', item: event } },
      { put: { table_name: 'EventReminders', item: {event_id: "#{event['google_id']}-#{event['title']}", last_updated: Time.now.to_s, subscriber_id: event['google_id']} } }
    ]
  })

  create_google_calendar_events([event],google_calendar_id,session_id['google_id'])
  upload_url = tmp_upload_url
end

return StatusCodeStr::INTERNAL_SERVER_ERROR unless upload_url

return StatusCodeStr::plain_text(upload_url)
