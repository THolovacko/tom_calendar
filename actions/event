#! /usr/bin/ruby

url_id = TomEnv::get('QUERY_STRING')
url_id = url_id.split('=')[1]

event = nil
cache_result = TomMemcache::get("url_id#{url_id}").freeze
if cache_result
  event = JSON.parse(cache_result)
else
  exponential_backoff do
    dynamodb = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
    result_item = dynamodb.get_item({ table_name: 'EventURLIDs', key: {url_id: url_id} })&.item
    return StatusCodeStr::bad_request_error_message('event has no url') unless result_item
    event_id = result_item['event_id']
    event_id = event_id.split('-',2)
    creator_id = event_id[0]
    title = event_id[1]
    event = dynamodb.get_item({ table_name: 'Events', key: {google_id: creator_id, title: title} })&.item
  end

  TomMemcache::set("url_id#{url_id}", event.to_json, 30).freeze
end

return %(Content-type: text/html


<html lang="en">
  <title>#{event['title']}</title>
  <head>
    <link rel="preload" as="image" href="https://tomcalendar.com/public/favicon.ico">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css" rel="stylesheet"/>
  </head>
  <body onload="init();">
    <div id="event_image" align="center">
    </div>
    <div id="header_img">
      <img src="https://tomcalendareventimages.s3.us-east-2.amazonaws.com/#{event['image_id']}.#{event['image_extension']}" style="height:33vh;max-width:90vw;visibility:hidden;">
    </div>
    <p style="font-size:5rem;font-weight:500;word-break:break-all;margin-top:3vh;margin-bottom:3vh;padding-top:0;">#{event['title']}</p>
    <div id="event_date">
      <i style="display:inline-block;" class="material-icons md-36" id="date_type_icon">date_range</i>
      <span id="event_date_txt">TBD</span>
    </div>
    <div id="event_repeat">
      <i style="display:inline-block;" class="material-icons md-36" id="date_type_icon">refresh</i>
      <span id="event_repeat_txt">Does not repeat</span>
    </div>
  </body>
  <script>
    const CURRENT_EVENT = #{event.to_json};

    function init() {
      update_event_txt();
    }
    function parseTimeZone(target_time_zone) {
      if (!target_time_zone) {
        return '';
      }
      var time_zone_parts = target_time_zone.split('/');
      if (time_zone_parts.length > 1) {
        var time_zone_str = time_zone_parts[time_zone_parts.length - 1].replace(/_/g, ' ');
        if (time_zone_parts.length > 2) {
          time_zone_str += `, ${time_zone_parts[time_zone_parts.length - 2].replace(/_/g, ' ')}`;
        }
      }
      else {
        var time_zone_str = time_zone_parts[0].replace(/_/g, ' ');
      }
      return time_zone_str;
    }
    function update_event_txt() {
      var event_date_txt = document.getElementById('event_date_txt');
      var time_zone = `${parseTimeZone(CURRENT_EVENT['time_zone'])} Time`;

      if (CURRENT_EVENT['is_general_event']) {
        if (CURRENT_EVENT['date_type']) {
          event_date_txt.innerText = CURRENT_EVENT["date_type"];
        } else {
          event_date_txt.innerText = 'TBD';
        }
      } else if (!CURRENT_EVENT['start_date']) {
        event_date_txt.innerText = 'TBD';
      }
      else {
        var event_date_time = CURRENT_EVENT["start_date"];

        if (CURRENT_EVENT['end_date'] && (CURRENT_EVENT['end_date'] != CURRENT_EVENT['start_date'])) {
          event_date_time += ` - ${CURRENT_EVENT['end_date']}`;
        }
        if (CURRENT_EVENT['start_time'] && CURRENT_EVENT['end_time']) {
          event_date_time += `\n\n ${CURRENT_EVENT['start_time'].toLowerCase().replace(' ','')} - ${CURRENT_EVENT['end_time'].toLowerCase().replace(' ','')}`;
          event_date_time += `\n\n ${time_zone}`;
        }

        event_date_txt.innerText = event_date_time;
      }
    }
  </script>
  <style type="text/css">
    html {
      text-align: center;
      font-family: 'Roboto', sans-serif;
      font-size: 16px;
    }
    body {
      background-color: #FEFFFE;
      overflow: auto;
    }
    #event_image::before {
      background-image: url("https://tomcalendareventimages.s3.us-east-2.amazonaws.com/#{event['image_id']}.#{event['image_extension']}");
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
      -webkit-filter: blur(25px);
      z-index: -1;
      content: "";
      display: block;
      width: 100vw;
      height: 32vh;
    }
    #event_image {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;
    }
    #header_img {
      background-image: url("https://tomcalendareventimages.s3.us-east-2.amazonaws.com/#{event['image_id']}.#{event['image_extension']}");
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
      box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
      display: inline-block;
      margin-top: -30vh;
      z-index: 3;
      position: relative;
    }
    #event_date, #event_repeat {
      display: table;
      text-align: left;
      font-size: 2.5rem;
      margin-left: 5vw;
      vertical-align: middle;
    }
    #event_date_txt, #event_repeat_txt {
      line-height: 0.7;
      display: table-cell;
      vertical-align: middle;
    }
    .material-icons {
      font-size: 3.25rem;
      margin-right: 3vw;
    }
  </style>
</html>
)
