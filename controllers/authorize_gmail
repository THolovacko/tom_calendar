#! /usr/bin/ruby

require 'jwt'
require_relative '../lib/tom_calendar.rb'

# @remember: need submit consent screen for OAuth verification
# @remember: need to notify user when refresh token is not valid while auto updating google calendar  ex) if subscribed event changes date and user changed gmail password
# @remember: need to be able to be signed in on mutliple devices as same user on same ip


begin
  # create google tokens and session
  dynamodb           = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
  google_authorizer  = get_google_authorizer(dynamodb)
  authorization_code = ARGF.first
  credentials        = google_authorizer.get_credentials_from_code(user_id: 'default', code: authorization_code)

  user_data = JWT.decode(credentials.id_token, nil, false).first
  raise 'invalid iss' unless user_data['iss'] == 'https://accounts.google.com'.freeze
  raise 'invalid aud' unless user_data['aud'] == ENV['GOOGLE_OAUTH_CLIENT_ID']
  raise 'invalid exp' unless user_data['exp'] > 0

  google_authorizer.store_credentials(user_data['sub'], credentials)

  ip_hash        = Digest::SHA256.hexdigest "#{ENV['SESSION_HASH_LEFT_PADDING']}#{ENV['REMOTE_ADDR']}#{ENV['SESSION_HASH_RIGHT_PADDING']}"
  google_id_hash = Digest::SHA256.hexdigest "#{ENV['SESSION_HASH_LEFT_PADDING']}#{user_data['sub']}#{ENV['SESSION_HASH_RIGHT_PADDING']}"
  password_hash  = Digest::SHA256.hexdigest "#{ENV['SESSION_HASH_LEFT_PADDING']}#{Time.now}#{rand}#{ENV['SESSION_HASH_RIGHT_PADDING']}"
  session_id     = { google_id_hash: google_id_hash, password_hash: password_hash }

  session_params = {
    table_name: 'Sessions',
    item: { ip_hash: ip_hash, google_id_hash: google_id_hash, password_hash: password_hash, google_id: user_data['sub'] }
  }

  dynamodb.put_item(session_params)
rescue Exception => e
  credentials = nil
  error = "#{e.message}:#{e.backtrace.inspect}"
end

if credentials.nil?
  print "Content-type: text/html\n\nfailed: #{error}"
else
  print "Content-type: application/json\n\n#{session_id.to_json}"
end
