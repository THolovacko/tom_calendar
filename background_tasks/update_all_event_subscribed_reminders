#! /usr/bin/ruby

event = $background_task_params[:event]
event_id = "#{event['google_id']}-#{event['title']}"

dynamodb = Aws::DynamoDB::Client.new(region: ENV['AWS_REGION'])
begin
  last_evaluated_key ||= nil
  db_attempts ||= 0

  reminders_params = {
    table_name: 'EventReminders',
    index_name: "event_id-last_updated-index",
    key_condition_expression: "#eid = :event_id",
    expression_attribute_names: { "#eid" => "event_id" },
    expression_attribute_values: { ":event_id" => event_id },
    limit: 1000,
    exclusive_start_key: last_evaluated_key
  }

  # get all event reminders with given event_id
  query_result = dynamodb.query(reminders_params)
  query_result.items.each do |reminder|
    # update each google calendar event
    subscriber_google_id = reminder['subscriber_id']
    subscriber_google_calendar_id = ( dynamodb.get_item({ table_name: 'GoogleCalendarIDs', key: { google_id: subscriber_google_id } })&.item || {} )['google_calendar_id']
    delete_google_calendar_events([event],subscriber_google_calendar_id,subscriber_google_id) if subscriber_google_calendar_id && subscriber_google_id
    create_google_calendar_events([event],subscriber_google_calendar_id,subscriber_google_id) if subscriber_google_calendar_id && subscriber_google_id
    dynamodb.update_item({ table_name: 'EventReminders', key: {subscriber_id: subscriber_google_id, event_id: reminder['event_id']}, update_expression: 'SET last_updated = :lu', expression_attribute_values: {':lu': Time.now.to_s} })
  end

  if query_result.last_evaluated_key != last_evaluated_key
    last_evaluated_key = query_result.last_evaluated_key
  else
    last_evaluated_key = nil
  end
rescue Exception => e
  if db_attempts < 8
    db_attempts = db_attempts + 1
    sleep 1
    retry
  else
    raise "Failed to delete event reminders for #{event_id}"
  end
end
